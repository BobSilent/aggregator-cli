name: release-to-GitHub

on:
  push:
    tags:
    - '*' # just for testing
    - 'v[0-9].[0-9]*'
    paths:
    - 'src/*'

jobs:
  build:

    # crossing fingers
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        runtime: [win-x64, linux-x64, osx-x64]

    steps:
    - uses: actions/checkout@v1
    # HACK required for GitVersion
    - run: |
        git fetch --tags
        git branch --create-reflog master origin/master
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.2.401' # SDK Version to use.

    # dump to a file
    #   docker run --rm -v "$(pwd):/repo" gittools/gitversion:5.0.2-linux /repo -nocache -output buildserver -exec /bin/sh -execargs "-c \"echo \$GitVersion_FullSemVer > /repo/gitversion.txt\""
    # Update AssemblyInfo files
    #   docker run --rm -v "$(pwd):/repo" gittools/gitversion:5.0.2-linux /repo -updateassemblyinfo -output buildserver -nocache
    # patch file
    #   docker run --rm -v "$(pwd):/repo" gittools/gitversion:5.0.2-linux /repo -l /repo/gitversion.log -nocache -output buildserver -exec /bin/bash -execargs "-c \"sed -E -i \"s/version=.*/version=\$GitVersion_FullSemVer/\" /repo/src/aggregator-function/aggregator-manifest.ini\""
    - name: Update AssemblyInfo files
      uses: docker://gittools/gitversion:5.0.2-linux
      with:
        args: '-nocache -updateassemblyinfo -output buildserver'
    - name: 'Set version in aggregator-manifest.ini'
      uses: docker://gittools/gitversion:5.0.2-linux
      with:
        args: '-nocache -output buildserver -exec /bin/bash -execargs "-c \"sed -E -i \"s/version=.*/version=\$GitVersion_FullSemVer/\" /github/workspace/src/aggregator-function/aggregator-manifest.ini\""'

    # compile and test
    - name: 'Delete Directory.Build.targets from src/aggregator-function'
      run: rm src/aggregator-function/Directory.Build.targets
    - run: 'dotnet restore src/aggregator-cli.sln'
    - run: 'dotnet build --configuration Release src/aggregator-cli.sln'
    - run: 'dotnet test --configuration Release src/unittests-core/unittests-core.csproj'
    - run: 'dotnet test --configuration Release src/unittests-ruleng/unittests-ruleng.csproj'
    # logon-data.json is stored in project Secrets
    - run: echo "$LOGONDATA_JSON" > $GITHUB_WORKSPACE/src/integrationtests-cli/logon-data.json
      env:
        LOGONDATA_JSON: ${{ secrets.INTEGRATIONTESTS_CLI_LOGONDATA_JSON }}
    - run: |
        export LOGONDATA_FNAME=$GITHUB_WORKSPACE/src/integrationtests-cli/logon-data.json
        INTEGRATIONTEST_SUBSCRIPTIONID=$(jq -r '.subscription?' $LOGONDATA_FNAME)
        echo "Azure subscription for testing: $INTEGRATIONTEST_SUBSCRIPTIONID"
    
    # heavy weight integration tests
    - run: 'dotnet test --configuration Release src/integrationtests-cli/integrationtests-cli.csproj'
    - run: rm $GITHUB_WORKSPACE/src/integrationtests-cli/logon-data.json

    # Create Release in GitHub as Draft
    - name: 'Dump commit messages since last tag as draft release notes'
      run: git log $(git describe --abbrev=0 --always)..HEAD --pretty=format:"%s" --reverse > release.log
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        bodyFile: release.log
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
    # Upload Artifacts to Release
    - run: 'dotnet publish --configuration Release src/aggregator-function/aggregator-function.csproj --output outputs/function/'
    - name: 'Zip FunctionRuntime'
      run: |
        pushd outputs/function && \
        7z a -bd -r publish.zip && \
        popd

    - name: Upload FunctionRuntime to GitHub release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: 'outputs/function/publish.zip'
        asset_name: FunctionRuntime.zip
        tag: ${{ github.ref }}
        overwrite: true
    
    # Upload Artifacts to Release
    - run: 'dotnet publish --configuration Release --runtime $RUNTIME --self-contained true src/aggregator-cli/aggregator-cli.csproj --output outputs/$RUNTIME/'
      env:
        RUNTIME: ${{ matrix.runtime }}
    - name: 'Zip ${{ matrix.runtime }} CLI'
      run: |
        pushd outputs/$RUNTIME && \
        7z a -bd -r publish.zip && \
        popd

      env:
        RUNTIME: ${{ matrix.runtime }}

    - name: Upload aggregator-cli-${{ matrix.runtime }} to GitHub release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: 'outputs/${{ matrix.runtime }}/publish.zip'
        asset_name: aggregator-cli-${{ matrix.runtime }}.zip
        tag: ${{ github.ref }}
        overwrite: true
